{"version":3,"sources":["components/Creatures.js","components/SingleCreature.js","App.js","serviceWorker.js","index.js"],"names":["Creatures","state","creatures","newCreature","name","description","isCreatureFormDisplayed","componentDidMount","axios","get","then","res","_this","setState","data","toggleCreatureForm","props","handleChange","e","cloneNewCreature","Object","objectSpread","target","value","createCreature","preventDefault","post","creaturesList","toConsumableArray","unshift","react_default","a","createElement","this","map","creature","key","_id","react_router_dom","to","concat","onClick","onSubmit","htmlFor","id","type","onChange","Component","SingleCreature","redirectToHome","isEditFormDisplayed","match","params","deleteCreature","delete","toggleEditForm","cloneCreature","updateCreature","put","react_router","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5da737a4.chunk.js","sourcesContent":["// import React, {Component} from 'react';\n// import axios from 'axios';\n\n// class User extends Component {\n\n//     state = {\n//             user: {},\n//             categories: [],\n//     }\n\n//     componentDidMount() {\n//         const userId = this.props.match.params.id;\n//         this.fetchuser(userId)\n//     }\n\n//     fetchUser = async (userId) => {\n//         try {\n//             const userResponse = await axios.get(`/api/v1/users/${userId}`)\n//             this.setState({\n//                 user: userResponse.data,\n//                 categories: userResponse.data.categories,\n//             })\n//         }\n//         catch (error) {\n//             console.log(error)\n//             this.setState({error: error.message})\n//         }\n//     }\n\n//     render() {\n//         return (\n//             <div>\n//                 <img src={this.state.user.photo_url} alt=\"\"/>\n//                 <h1>{this.state.user.name}</h1>\n//                 {this.state.categories.map(category => (\n//                     <div key={category.id}>\n//                         <h4>{category.title}</h4>\n                        \n//                     </div>\n//                 ))}\n//             </div>\n//         );\n//     }\n// }\n\n// export default User;\n\nimport React, { Component } from 'react'\nimport axios from 'axios'\nimport { Link } from 'react-router-dom'\n\nclass Creatures extends Component {\n  state = {\n      creatures: [],\n      newCreature: {\n          name: '',\n          description: ''\n      },\n      isCreatureFormDisplayed: false\n  }\n\n  componentDidMount = () => {\n    axios.get('/api/v1').then(res => {\n        this.setState({creatures: res.data})\n    })\n  }\n\n  toggleCreatureForm = () => {\n      this.setState((state, props) => {\n          return ({isCreatureFormDisplayed: !state.isCreatureFormDisplayed})\n      })\n  }\n\n  handleChange = (e) => {\n    const cloneNewCreature = {...this.state.newCreature}\n    cloneNewCreature[e.target.name] = e.target.value\n    this.setState({newCreature: cloneNewCreature})\n  }\n\n  createCreature = (e) => {\n    e.preventDefault()\n    axios\n        .post('/api/v1', {\n            name: this.state.newCreature.name,\n            description: this.state.newCreature.description\n        })\n        .then(res => {\n            const creaturesList = [...this.state.creatures]\n            creaturesList.unshift(res.data)\n            this.setState({\n                newCreature: {\n                    name: '',\n                    description: ''\n                },\n                isCreatureFormDisplayed: false,\n                creatures: creaturesList\n            })\n        })\n\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Creatures</h1>\n        {\n            this.state.creatures.map(creature => {\n                return (\n                    <div key={creature._id}>\n                        <Link\n                            to={`/${creature._id}`}\n                        >\n                            {creature.name}\n                        </Link>\n                    </div>\n                )\n            })\n        }\n        <button onClick={this.toggleCreatureForm}>+ New Creature</button>\n        {\n            this.state.isCreatureFormDisplayed\n                ? <form onSubmit={this.createCreature}>\n                    <div>\n                        <label htmlFor=\"name\">Name</label>\n                        <input\n                            id=\"name\"\n                            type=\"text\"\n                            name=\"name\"\n                            onChange={this.handleChange}\n                            value={this.state.newCreature.name}\n                        />\n                    </div>\n                    <div>\n                        <label htmlFor=\"description\">Description</label>\n                        <textarea\n                            id=\"description\"\n                            type=\"text\"\n                            name=\"description\"\n                            onChange={this.handleChange}\n                            value={this.state.newCreature.description}\n                        />\n                    </div>\n                    <button>Create</button>\n                </form>\n                : null\n        }\n      </div>\n    )\n  }\n}\n\nexport default Creatures","import React, { Component } from \"react\";\nimport { Redirect, Link } from 'react-router-dom';\nimport axios from \"axios\";\n\nclass SingleCreature extends Component {\n  state = {\n      creature: {\n          name: '',\n          description: ''\n      },\n      redirectToHome: false,\n      isEditFormDisplayed: false\n  }\n\n  componentDidMount = () => {\n      axios.get(`/api/v1/${this.props.match.params.id}`).then(res => {\n          this.setState({creature: res.data})\n      })\n  }\n\n  deleteCreature = () => {\n      axios.delete(`/api/v1/${this.props.match.params.id}`).then(res => {\n          this.setState({redirectToHome: true})\n      })\n  }\n\n  toggleEditForm = () => {\n      this.setState((state, props) => {\n          return {isEditFormDisplayed: !state.isEditFormDisplayed}\n      })\n  }\n\n  handleChange = (e) => {\n      const cloneCreature = {...this.state.creature}\n      cloneCreature[e.target.name] = e.target.value\n      this.setState({creature: cloneCreature})\n  }\n\n  updateCreature = (e) => {\n      e.preventDefault()\n      axios\n        .put(`/api/v1/${this.props.match.params.id}`, {\n            name: this.state.creature.name,\n            description: this.state.creature.description\n        })\n        .then(res => {\n            this.setState({creature: res.data, isEditFormDisplayed: false})\n        })\n  }\n\n  render() {\n    if(this.state.redirectToHome) {\n        return (<Redirect to=\"/\" />)\n    }\n\n    return (\n      <div>\n        <Link to=\"/\">Back to Creatures Home</Link>\n        <h1>Single Creature</h1>\n        <button onClick={this.toggleEditForm}>Edit</button>\n        {\n            this.state.isEditFormDisplayed\n                ? <form onSubmit={this.updateCreature}>\n                    <div>\n                        <label htmlFor=\"name\">Name</label>\n                        <input\n                            id=\"name\"\n                            type=\"text\"\n                            name=\"name\"\n                            onChange={this.handleChange}\n                            value={this.state.creature.name}\n                        />\n                    </div>\n                    <div>\n                        <label htmlFor=\"description\">Description</label>\n                        <textarea\n                            id=\"description\"\n                            name=\"description\"\n                            onChange={this.handleChange}\n                            value={this.state.creature.description}\n                        />\n                    </div>\n                    <button>Update</button>\n                </form>\n                : <div>\n                    <div>\n                        Name: {this.state.creature.name}\n                    </div>\n                    <div>\n                        Description: {this.state.creature.description}\n                    </div>\n                    <button onClick={this.deleteCreature}>Delete</button>\n                </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default SingleCreature;","// // App.js\n// import React, {Component} from \"react\";\n// import {BrowserRouter as Router, Route, Switch, Link} from \"react-router-dom\";\n// import UserList from \"./components/UserList\";\n// import User from \"./components/User\";\n// import \"./App.css\";\n\n// class App extends Component {\n//     render() {\n//         return (\n//             <Router>\n//                 <div className=\"App\">\n\n//                     <div>\n//                         <h1>Study Buddy</h1>\n//                         <div>\n//                             <div><Link to=\"/\">All Users</Link></div>\n//                         </div>\n//                     </div>\n\n//                     <Switch>\n//                       <Route exact path=\"/\" component={UserList}/>\n//                       <Route path=\"/user/:id\" component={User}/>\n//                     </Switch>\n//                 </div>\n//             </Router>\n//         );\n//     }\n// }\n\n// export default App;\n\n\nimport React, { Component } from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport Creatures from './components/Creatures.js'\nimport SingleCreature from './components/SingleCreature.js'\n\nclass App extends Component {\n  render () {\n    return (\n      <Router>\n        <div>\n          <Switch>\n            <Route exact path=\"/\" component={Creatures}/>\n            <Route path=\"/:id\" component={SingleCreature}/>\n          </Switch>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}